#
#  Copyright (c) 2007 by Spirent Communications Inc.
#  All Rights Reserved.
#
#  This software is confidential and proprietary to Spirent Communications Inc.
#  No part of this software may be reproduced, transmitted, disclosed or used
#  in violation of the Software License Agreement without the expressed
#  written consent of Spirent Communications Inc.
#

import os

Import('*')

main_sources = [ 'main.cpp' ]

class_sources = [
    'generator_3_port_client.cpp',
    'loadProfile_1_port_client.cpp',
    'sip_Autogen_port_server.cpp',
    'sip_1_port_server.cpp',
    './VoIPUtils.cpp',
    './app/McoDriver.cpp',
    './app/SipApplication.cpp',
    './app/SipApplicationProxy.cpp',
    './app/SipMsgSetSrv_1.cpp',
    './app/UserAgentBlock.cpp',
    './app/UserAgentBlockLoadStrategies.cpp',
    './app/UserAgentConfig.cpp',
    './app/UserAgentNameEnumerator.cpp',
    './app/UserAgentRegStateNotifier.cpp',
    './voipmedia/VoIPMediaManager.cpp',
    './voipmedia/mediafiles/MediaFilesCommon.cpp',
    './voipmedia/mediafiles/MediaFileProcessor.cpp',
    './voipmedia/fpgartp/GeneratorClientHandler.cpp',
    './voipmedia/fpgartp/FPGARTPMediaChannelAdapter.cpp',
    './voipmedia/encrtp/EncRTPMediaChannelAdapter.cpp',
    './voipmedia/encrtp/EncTIP.cpp',
    './voipmedia/encrtp/EncRTPMediaManager.cpp',
    './voipmedia/encrtp/EncRTPMediaEndpoint.cpp',
    './voipmedia/encrtp/EncRTPProcess.cpp',
    './voipmedia/encrtp/EncRTPUtils.cpp',
    './voipmedia/encrtp/EncRTPGenSession.cpp',
    './voipmedia/vq/VQStats.cpp',
    './voipmedia/vq/VQStream.cpp',
    './signaling/sip/SipUri.cpp',
    './signaling/sip/SipUtils.cpp',
    './signaling/sip/UserAgent.cpp',
    './signaling/sip/UserAgentFactory.cpp',
    './signaling/sip/lean/SipleanAuthentication.cpp',
    './signaling/sip/lean/SipProtocol.cpp',
    './signaling/sip/lean/SipTransactionLayer.cpp',
    './signaling/sip/lean/SipTransactionLayerState.cpp',
    './signaling/sip/lean/UdpSocketHandler.cpp',
    './signaling/sip/lean/UdpSocketHandlerFactory.cpp',
    './signaling/sip/lean/UserAgentLean.cpp',
    './signaling/sip/lean/UserAgentCallDialog.cpp',
    './signaling/sip/lean/UserAgentCallDialogState.cpp',
    './signaling/sip/lean/UserAgentDialog.cpp',
    './signaling/sip/lean/UserAgentRegDialog.cpp',
    './signaling/sip/rv/core/SipEngine.cpp',
    './signaling/sip/rv/core/SipChannel.cpp',
    './signaling/sip/rv/core/RvSipUtils.cpp',
    './signaling/sip/rv/core/RvSipAka.cpp',
    './signaling/sip/rv/core/SipCallSMBasic.cpp',
    './signaling/sip/rv/core/SipCallSMTip.cpp',
    './signaling/sip/rv/RvUserAgent.cpp',
    './signaling/sip/rv/RvUserAgentSdpMedia.cpp'
    ]


mco_sources = [
    'statsdb.c'
    ]

xcginput = [ 
    ('l4l7Base_Autogen_port_server.h', '#content/traffic/l4l7/idl/l4l7Base_Autogen.idl'),
    ('l4l7Base_1_port_server.h', '#content/traffic/l4l7/idl/l4l7Base_1.idl'),
    ('sip_Autogen_port_server.h', '#content/traffic/l4l7/idl/sip_Autogen.idl'),
    ('sip_Autogen_port_server.cpp', '#content/traffic/l4l7/idl/sip_Autogen.idl'),
    ('sip_1_port_server.h', '#content/traffic/l4l7/idl/sip_1.idl'),
    ('sip_1_port_server.cpp', '#content/traffic/l4l7/idl/sip_1.idl'),
    ('generator_3_port_client.h', '#content/traffic/l2l3/idl/generator_3.idl'),
    ('generator_3_port_client.cpp', '#content/traffic/l2l3/idl/generator_3.idl'),
    ('loadProfile_1_port_client.h', '#content/traffic/l2l3/idl/loadProfile_1.idl'),
    ('loadProfile_1_port_client.cpp', '#content/traffic/l2l3/idl/loadProfile_1.idl'),
    ]

e = env.Clone()
e.SConscript([os.path.join('#content/traffic/l4l7/il/external/RvSipTK/','SConscript')])

# add dependencies on autogenerated header files
utils.xcgSetupAutogenDependencies(e, xcginput, class_sources)

for file, idl_path in xcginput :
    e.XCGBuilder(file, idl_path)

e.Depends('#content/traffic/l4l7/idl/sip_Autogen.idl', '#content/traffic/l4l7/idl/l4l7Base_1.idl')
e.Depends('#content/traffic/l4l7/idl/sip_1.idl', '#content/traffic/l4l7/idl/sip_Autogen.idl')

e.MCOBuilder(target=['statsdb.c', 'statsdb.h'], source='statsdb.mco')

if env['debug']:
	build_type = 'debug'
else:
	build_type = 'release'

arch_full_name = conf['arch_name'] + "_" + conf['arch_variant']

if conf["arch_variant"] == "yocto_i686" :
	e['CPPFLAGS'] += ' -DYOCTO_I686 '

e['CPPPATH'] += [ '.',
	          './app',
	          './voipmedia','./voipmedia/mediafiles','./voipmedia/vq','./voipmedia/encrtp','./voipmedia/fpgartp',
	          './signaling','./signaling/sip','./signaling/sip/lean','./signaling/sip/rv','./signaling/sip/rv/core',
                  '#content/traffic/l4l7/il',
                  '#framework/il/common/lib', 
                  conf['eXtremeDB_srcdir'] + '/include',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/ads',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/common',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/depcore',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/rtpRtcp',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/offerAnswer',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/sdp',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/sigcomp',
                  '#content/traffic/l4l7/il/external/RvSipTK/include/' + build_type + '/sip',
                  '#content/tripleplay/vqana/il/vqanad/vqmon/include',
                  '#content/traffic/l4l7/il/external/libtip-1.3/lib/common/src',
                  '#content/traffic/l4l7/il/external/libtip-1.3/lib/packet/src',
                  '#content/traffic/l4l7/il/external/libtip-1.3/lib/user/src',
                 ]

e['LIBS'].insert(0, 'bsdnet-preload')

if conf['arch_variant'] == "yocto_i686" :
	e['LIBS'] += [ 'l4l7app',
               'l4l7base',
               'l4l7utils',
               'statsframework',
	       'rvsip',
               'rvdepcore',
               'rvrtp',
               'rvsrtp',
               'rvads',
	       'rvsigcomp',
	       'rvsdp',
               'rvcommon',
               'vqmon',
               'tipuser',
               'tippacket',
               'tipcommon',
               'pthread',
               'rt',
               'ACE',
               'mps',
               'vif',
               'hal++',
               'ildaemon',
               'phxlog',
               'phxexception',
               'phxerrno',
               'ilprotocol',
               'phxrpc',
               'frameworkidl',
               'pthreadwrapper',
               'ifmgrclient'
               ]
else :
	e['LIBS'] += [ 'l4l7app',
               'l4l7base',
               'l4l7utils',
               'statsframework',
	       'rvsip',
               'rvdepcore',
               'rvrtp',
               'rvsrtp',
               'rvads',
	       'rvsigcomp',
	       'rvsdp',
               'rvcommon',
               'vqmon',
               'tipuser',
               'tippacket',
               'tipcommon',
               'pthread',
               'posixtime'
               ]

e['LIBS'] += e['LIB_DB']


if conf['arch_variant'] == "yocto_i686" :
	e['LIBPATH'] += [os.path.join('#/content/traffic/l4l7/il/external/RvSipTK/binaries/MontaVista_4.0_'\
                + arch_full_name + '/' + build_type + '/lib'),
                 os.path.join('#content/tripleplay/vqana/il/vqanad/vqmon/lib/linux-' \
                + arch_full_name + '/' + build_type ),
                os.path.join('#/content/traffic/l4l7/il/external/libtip-1.3/binaries/'\
                + arch_full_name + '/' + build_type + '/lib')]
else :
	e['LIBPATH'] += [os.path.join('#/content/traffic/l4l7/il/external/RvSipTK/binaries/MontaVista_4.0_'\
                + arch_full_name + '/' + build_type + '/lib'),
                 os.path.join('#content/tripleplay/vqana/il/vqanad/vqmon/lib/linux-' \
                + arch_full_name + '_mvl40/' + build_type ),
                os.path.join('#/content/traffic/l4l7/il/external/libtip-1.3/binaries/MontaVista_4.0_'\
                + arch_full_name + '/' + build_type + '/lib')]

binname = 'sipd'

class_objs = []
for file in class_sources:
    class_objs += e.StaticObject(source=file)

mco_objs = []
for file in mco_sources :
    mco_objs += e.StaticObject(source=file)

bin = e.Program(os.path.join(conf['bin_dir'], binname), source=main_sources+class_objs+mco_objs)
utils.install(e, bin)

if env['utest'] :
    utest = SConscript(os.path.join('utest', 'SConscript'), [ 'class_objs', 'mco_objs' ])
    utils.coverageReport(e, utest)

# Install startup script
startup_script = 'sip.sh'
script = e.Command(os.path.join(conf['script_startup_blddir'], 'stc', startup_script), startup_script, 'cp -f $SOURCE $TARGET')
utils.install(e,script)

# Local Variables:
# mode:python
# End:
# vim: syntax=python
