#
#  Copyright (c) 2007 by Spirent Communications Inc.
#  All Rights Reserved.
#
#  This software is confidential and proprietary to Spirent Communications Inc.
#  No part of this software may be reproduced, transmitted, disclosed or used
#  in violation of the Software License Agreement without the expressed
#  written consent of Spirent Communications Inc.
#
# $Id: //TestCenter/p2.30_dev_ifmgr/content/traffic/l2l3/il/Generator/Learning/SConscript#1 $
#

import os

Import('*')

sources = [ 'main.cpp' ]
cch_sources = [ 'ClientConnectionHandler.cpp' ,
                'ClientConnectionHandlerHost.cpp' ,
                'CapabilitiesParser.cpp',
                    ]
class_sources = [
    'xmppvj_Autogen_port_server.cpp',
    'xmppvj_1_port_server.cpp',
    'ClientConnectionHandler.cpp',
    'XmppApplication.cpp',
    'XmppApplicationProxy.cpp',
    'XmppMsgSetSrv_1.cpp',
    'XmppClientBlock.cpp',
    'XmppClientBlockLoadStrategies.cpp',
    'McoDriver.cpp',
    'XmppCommon.cpp',
    'CapabilitiesParser.cpp',
    'UniqueIndexTracker.cpp',
    'XmppClientRegStateNotifier.cpp',
    ]

mco_sources = [
    'statsdb.c'
    ]

xcginput = [ 
    ('l4l7Base_Autogen_port_server.h', '#content/traffic/l4l7/idl/l4l7Base_Autogen.idl'),
    ('l4l7Base_1_port_server.h', '#content/traffic/l4l7/idl/l4l7Base_1.idl'),
    ('xmppvj_Autogen_port_server.h', '#content/traffic/l4l7/idl/xmppvj_Autogen.idl'),
    ('xmppvj_Autogen_port_server.cpp', '#content/traffic/l4l7/idl/xmppvj_Autogen.idl'),
    ('xmppvj_1_port_server.h', '#content/traffic/l4l7/idl/xmppvj_1.idl'),
    ('xmppvj_1_port_server.cpp', '#content/traffic/l4l7/idl/xmppvj_1.idl'),
    ]

e = env.Clone()

# add dependencies on autogenerated header files
utils.xcgSetupAutogenDependencies(e, xcginput, class_sources)

if conf['arch_variant'] == 'yocto_i686':
    gloox_lib_dir='pentium4'
else: 
    gloox_lib_dir=conf['compiler_prefix'][0:-1]

e.SConscript([os.path.join('#content/traffic/l4l7/il/external/gloox/','SConscript')])
for file, idl_path in xcginput :
    e.XCGBuilder(file, idl_path)

e.Depends('#content/traffic/l4l7/idl/xmppvj_Autogen.idl', '#content/traffic/l4l7/idl/l4l7Base_1.idl')
e.Depends('#content/traffic/l4l7/idl/xmppvj_1.idl', '#content/traffic/l4l7/idl/xmppvj_Autogen.idl')

e.MCOBuilder(target=['statsdb.c', 'statsdb.h'], source='statsdb.mco')

e['CPPPATH'] += [ '.',
                  '#content/traffic/l4l7/il',
                  '#framework/il/common/lib', 
                  '#framework/il/common/include',
                  '#content/traffic/l4l7/il/external/gloox/binaries/'+gloox_lib_dir+'/gloox/include/gloox',
                  '#common/tools/xercesc/src',
                  conf['eXtremeDB_srcdir'] + '/include',
                  ]

e['LIBS'].insert(0, 'bsdnet-preload')

e['LIBS'] += [ 
    'l4l7app',
    'l4l7base',
    'l4l7utils',
    'statsframework',
    'gloox',
    'gnutls',
    'nettle',
    'hogweed',
    'gcrypt',
    'gmp',
    'pthread',
    'xerces-c',
    'resolv',
    'z'
]
e['LIBS'] += e['LIB_DB']

boostVersion = '1_39'

if conf['arch_variant'].find('octeon') != -1:
    gccVersion = '41'
else:
    gccVersion = '34'

e['LIBS'] += ['boost_filesystem-gcc%s-s-%s' % (gccVersion, boostVersion)]
e['LIBS'] += ['boost_system-gcc%s-s-%s' % (gccVersion, boostVersion)]
e['LIBPATH'] += ['#/content/traffic/l4l7/il/external/gloox/binaries/'+gloox_lib_dir+'/gloox/lib/']
e['LIBPATH'] += ['#/content/traffic/l4l7/il/external/gloox/binaries/'+gloox_lib_dir+'/gnutls/lib/']
e['LIBPATH'] += ['#/content/traffic/l4l7/il/external/gloox/binaries/'+gloox_lib_dir+'/nettle/lib/']
e['LIBPATH'] += ['#/content/traffic/l4l7/il/external/gloox/binaries/'+gloox_lib_dir+'/libgcrypt/lib/']
e['LIBPATH'] += ['#/content/traffic/l4l7/il/external/gloox/binaries/'+gloox_lib_dir+'/libgmp/lib/']
e['LIBPATH'] += ['#/content/traffic/l4l7/il/external/gloox/prebuilds/'+gloox_lib_dir+'/']


binname = 'xmppd'
cch_host = 'xmppd_host'

class_objs = []
for file in class_sources:
    class_objs += e.StaticObject(source=file)

mco_objs = []
for file in mco_sources :
    mco_objs += e.StaticObject(source=file)

bin = e.Program(os.path.join(conf['bin_dir'], binname), source=sources+class_objs+mco_objs)
utils.install(e, bin)



if env['utest'] :
    type = ARGUMENTS.get('type', 0)
    if int(type) == 1:
        cch_host = e.Program(cch_host,source=cch_sources)
    else:
        utest = SConscript(os.path.join('utest', 'SConscript'), [ 'class_objs', 'mco_objs' ],exports='e')
        utils.coverageReport(e, utest)

# Install startup script
startup_script = 'xmpp.sh'
script = e.Command(os.path.join(conf['script_startup_blddir'], 'stc', startup_script), startup_script, 'cp -f $SOURCE $TARGET')
utils.install(e,script)

# Install configuration file(s)
stanza_format = 'default_stanza_format.txt'
stanza = e.Command(os.path.join(conf['lib_blddir'], 'xmpp', stanza_format), stanza_format, 'cp -f $SOURCE $TARGET')
utils.install(e,stanza)

# Local Variables:
# mode:python
# End:
# vim: syntax=python
