#
#  Copyright (c) 2007 by Spirent Communications Inc.
#  All Rights Reserved.
#
#  This software is confidential and proprietary to Spirent Communications Inc.
#  No part of this software may be reproduced, transmitted, disclosed or used
#  in violation of the Software License Agreement without the expressed
#  written consent of Spirent Communications Inc.
#
# $Id: //TestCenter/p2.30_dev_ifmgr/content/traffic/l2l3/il/Generator/Learning/SConscript#1 $
#

import os

Import('*')

sources = [ 'main.cpp' ]

class_sources = [
    'http_Autogen_port_server.cpp',
    'http_1_port_server.cpp',
    'ClientConnectionHandler.cpp',
    'HttpApplication.cpp',
    'HttpApplicationProxy.cpp',
    'HttpMsgSetSrv_1.cpp',
    'HttpClientBlock.cpp',
    'HttpClientBlockLoadStrategies.cpp',
    'HttpProtocol.cpp',
    'HttpServer.cpp',
    'HttpServerBlock.cpp',
    'McoDriver.cpp',
    'AbrServerConnectionHandler.cpp',
    'ServerConnectionHandler.cpp',
    'HlsAbrPlaylist.cpp',
    'AbrPlaylist.cpp',
    'AbrUtils.cpp',
    'AbrPlayer.cpp',
    'AbrServer.cpp',
    'AbrClientBlock.cpp',
    'abr_apple/src/abr_algorithm.cpp',
    'abr_apple/src/abr_debug.cpp',
    'abr_apple/src/abr_error.cpp',
    'abr_apple/src/abr_parser.cpp',
    'abr_apple/src/abr_status.cpp',
    'abr_apple/src/abr_timeout.cpp',
    'abr_apple/src/abr_transaction.cpp',
#    'abr_apple/src/my_player.cpp'
    ]

mco_sources = [
    'statsdb.c'
    ]

xcginput = [ 
    ('l4l7Base_Autogen_port_server.h', '#content/traffic/l4l7/idl/l4l7Base_Autogen.idl'),
    ('l4l7Base_1_port_server.h', '#content/traffic/l4l7/idl/l4l7Base_1.idl'),
    ('http_Autogen_port_server.h', '#content/traffic/l4l7/idl/http_Autogen.idl'),
    ('http_Autogen_port_server.cpp', '#content/traffic/l4l7/idl/http_Autogen.idl'),
    ('http_1_port_server.h', '#content/traffic/l4l7/idl/http_1.idl'),
    ('http_1_port_server.cpp', '#content/traffic/l4l7/idl/http_1.idl'),
    ]

e = env.Clone()

# add dependencies on autogenerated header files
utils.xcgSetupAutogenDependencies(e, xcginput, class_sources)

for file, idl_path in xcginput :
    e.XCGBuilder(file, idl_path)

e.Depends('#content/traffic/l4l7/idl/http_Autogen.idl', '#content/traffic/l4l7/idl/l4l7Base_1.idl')
e.Depends('#content/traffic/l4l7/idl/http_1.idl', '#content/traffic/l4l7/idl/http_Autogen.idl')

e.MCOBuilder(target=['statsdb.c', 'statsdb.h'], source='statsdb.mco')

e['CPPPATH'] += [ '.',
                  '#content/traffic/l4l7/il',
                  '#framework/il/common/lib', 
                  conf['eXtremeDB_srcdir'] + '/include',
                  ]

e['LIBS'].insert(0, 'bsdnet-preload')

e['LIBS'] += [ 'ACE',
               'frameworkidl',
               'hal++',
               'ifmgrclient',
               'ildaemon',
               'ilprotocol',
               'l4l7app',
               'l4l7base',
               'l4l7utils',
               'mps',
               'phxerrno',
               'phxexception',
               'phxlog',
               'phxrpc',
               'statsframework',
               'vif',
               ]
e['LIBS'] += e['LIB_DB']

binname = 'httpd'

class_objs = []
for file in class_sources:
    class_objs += e.StaticObject(source=file)

mco_objs = []
for file in mco_sources :
    mco_objs += e.StaticObject(source=file)

bin = e.Program(os.path.join(conf['bin_dir'], binname), source=sources+class_objs+mco_objs)
utils.install(e, bin)

if env['utest'] :
    utest = SConscript(os.path.join('utest', 'SConscript'), [ 'class_objs', 'mco_objs' ])
    utils.coverageReport(e, utest)

# Install startup script
startup_script = 'http.sh'
script = e.Command(os.path.join(conf['script_startup_blddir'], 'stc', startup_script), startup_script, 'cp -f $SOURCE $TARGET')
utils.install(e,script)

# Local Variables:
# mode:python
# End:
# vim: syntax=python
